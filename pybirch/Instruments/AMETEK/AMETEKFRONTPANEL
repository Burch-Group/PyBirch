import sys
import json
from PyQt5 import QtWidgets, QtCore, QtGui

try:
    from pymeasure.instruments.ametek import Ametek7230 as _AmetekClass
except Exception:
    try:
        from pymeasure.instruments.ametek import Ametek7270 as _AmetekClass
    except Exception:
        _AmetekClass = None

try:
    from pymeasure.adapters import VISAAdapter
except Exception:
    VISAAdapter = None


class LEDIndicator(QtWidgets.QLabel):
    def __init__(self, diameter=16, parent=None):
        super().__init__(parent)
        self.setFixedSize(diameter, diameter)
        self.setStyleSheet("background-color: red; border-radius: %dpx;" % (diameter // 2))

    def set_state(self, state: bool):
        if state:
            self.setStyleSheet("background-color: green; border-radius: %dpx;" % (self.width() // 2))
        else:
            self.setStyleSheet("background-color: red; border-radius: %dpx;" % (self.width() // 2))


class AmetekFrontPanel(QtWidgets.QWidget):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Ametek 7230 Front Panel")
        self.inst = None

        self._build_ui()
        self._wire_signals()

    def _build_ui(self):
        main_layout = QtWidgets.QVBoxLayout(self)

        # --- Connection Panel ---
        conn_group = QtWidgets.QGroupBox("Connection")
        conn_layout = QtWidgets.QHBoxLayout(conn_group)
        self.resource_le = QtWidgets.QLineEdit("USB0::0x0A2D::0x0027::20059235::RAW")
        self.connect_btn = QtWidgets.QPushButton("Connect")
        self.disconnect_btn = QtWidgets.QPushButton("Disconnect")
        conn_layout.addWidget(QtWidgets.QLabel("VISA Resource:"))
        conn_layout.addWidget(self.resource_le)
        conn_layout.addWidget(self.connect_btn)
        conn_layout.addWidget(self.disconnect_btn)
        main_layout.addWidget(conn_group)

        grid = QtWidgets.QGridLayout()
        main_layout.addLayout(grid)

        # --- Input Panel ---
        input_group = QtWidgets.QGroupBox("Input")
        input_layout = QtWidgets.QVBoxLayout(input_group)
        self.imode_cb = QtWidgets.QComboBox()
        self.imode_cb.addItems(["Voltage", "Current"])
        self.float_chk = QtWidgets.QCheckBox("Float Input")
        self.auto_gain_chk = QtWidgets.QCheckBox("Auto Gain")
        input_layout.addWidget(QtWidgets.QLabel("Mode:"))
        input_layout.addWidget(self.imode_cb)
        input_layout.addWidget(self.float_chk)
        input_layout.addWidget(self.auto_gain_chk)
        grid.addWidget(input_group, 0, 0)

        # --- Sensitivity Panel ---
        sens_group = QtWidgets.QGroupBox("Sensitivity")
        sens_layout = QtWidgets.QVBoxLayout(sens_group)
        self.sens_cb = QtWidgets.QComboBox()
        self.sens_cb.addItems([f"Range {i}" for i in range(10)])
        self.auto_sens_btn = QtWidgets.QPushButton("Auto Sensitivity")
        sens_layout.addWidget(self.sens_cb)
        sens_layout.addWidget(self.auto_sens_btn)
        grid.addWidget(sens_group, 1, 0)

        # --- Reference & Oscillator ---
        ref_group = QtWidgets.QGroupBox("Reference & Oscillator")
        ref_layout = QtWidgets.QGridLayout(ref_group)
        self.refsrc_cb = QtWidgets.QComboBox()
        self.refsrc_cb.addItems(["Internal", "External"])
        self.harmonic_sb = QtWidgets.QSpinBox()
        self.harmonic_sb.setRange(1, 99)
        self.phase_dial = QtWidgets.QDial()
        self.phase_dial.setRange(-180, 180)
        self.phase_lbl = QtWidgets.QLabel("0°")
        self.osc_amp_sb = QtWidgets.QDoubleSpinBox()
        self.osc_amp_sb.setSuffix(" V")
        self.osc_amp_sb.setRange(0, 5)
        self.osc_freq_sb = QtWidgets.QDoubleSpinBox()
        self.osc_freq_sb.setSuffix(" Hz")
        self.osc_freq_sb.setRange(1, 1e6)

        ref_layout.addWidget(QtWidgets.QLabel("Reference Source:"), 0, 0)
        ref_layout.addWidget(self.refsrc_cb, 0, 1)
        ref_layout.addWidget(QtWidgets.QLabel("Harmonic:"), 1, 0)
        ref_layout.addWidget(self.harmonic_sb, 1, 1)
        ref_layout.addWidget(QtWidgets.QLabel("Phase:"), 2, 0)
        ref_layout.addWidget(self.phase_dial, 2, 1)
        ref_layout.addWidget(self.phase_lbl, 2, 2)
        ref_layout.addWidget(QtWidgets.QLabel("Osc Amp:"), 3, 0)
        ref_layout.addWidget(self.osc_amp_sb, 3, 1)
        ref_layout.addWidget(QtWidgets.QLabel("Osc Freq:"), 4, 0)
        ref_layout.addWidget(self.osc_freq_sb, 4, 1)
        grid.addWidget(ref_group, 0, 1, 2, 1)

        # --- Measurements ---
        meas_group = QtWidgets.QGroupBox("Measurements")
        meas_layout = QtWidgets.QGridLayout(meas_group)
        self.mag1_lcd = QtWidgets.QLCDNumber()
        self.phase1_lcd = QtWidgets.QLCDNumber()
        self.mag2_lcd = QtWidgets.QLCDNumber()
        self.phase2_lcd = QtWidgets.QLCDNumber()
        for lcd in (self.mag1_lcd, self.phase1_lcd, self.mag2_lcd, self.phase2_lcd):
            lcd.setSegmentStyle(QtWidgets.QLCDNumber.Flat)
            lcd.setDigitCount(8)
        meas_layout.addWidget(QtWidgets.QLabel("Mag1:"), 0, 0)
        meas_layout.addWidget(self.mag1_lcd, 0, 1)
        meas_layout.addWidget(QtWidgets.QLabel("Phase1:"), 1, 0)
        meas_layout.addWidget(self.phase1_lcd, 1, 1)
        meas_layout.addWidget(QtWidgets.QLabel("Mag2:"), 2, 0)
        meas_layout.addWidget(self.mag2_lcd, 2, 1)
        meas_layout.addWidget(QtWidgets.QLabel("Phase2:"), 3, 0)
        meas_layout.addWidget(self.phase2_lcd, 3, 1)
        grid.addWidget(meas_group, 0, 2, 2, 1)

        # --- Output Panel ---
        out_group = QtWidgets.QGroupBox("Outputs")
        out_layout = QtWidgets.QVBoxLayout(out_group)
        self.tc_cb = QtWidgets.QComboBox()
        self.tc_cb.addItems([f"TC {i}" for i in range(10)])
        self.slope_cb = QtWidgets.QComboBox()
        self.slope_cb.addItems([f"Slope {i}" for i in range(4)])
        self.sync_tc_chk = QtWidgets.QCheckBox("Sync Time Constant")
        out_layout.addWidget(QtWidgets.QLabel("Time Constant:"))
        out_layout.addWidget(self.tc_cb)
        out_layout.addWidget(QtWidgets.QLabel("Slope:"))
        out_layout.addWidget(self.slope_cb)
        out_layout.addWidget(self.sync_tc_chk)
        grid.addWidget(out_group, 0, 3, 2, 1)

        # --- Status Panel ---
        status_group = QtWidgets.QGroupBox("Status")
        status_layout = QtWidgets.QHBoxLayout(status_group)
        self.overload_led = LEDIndicator()
        self.status_led = LEDIndicator()
        status_layout.addWidget(QtWidgets.QLabel("Overload:"))
        status_layout.addWidget(self.overload_led)
        status_layout.addWidget(QtWidgets.QLabel("Status:"))
        status_layout.addWidget(self.status_led)
        grid.addWidget(status_group, 2, 0, 1, 4)

        # --- Settings Management ---
        settings_group = QtWidgets.QGroupBox("Settings Management")
        settings_layout = QtWidgets.QHBoxLayout(settings_group)
        self.sync_btn = QtWidgets.QPushButton("Sync from Instrument")
        settings_layout.addWidget(self.sync_btn)
        main_layout.addWidget(settings_group)

    def _wire_signals(self):
        self.phase_dial.valueChanged.connect(lambda v: self.phase_lbl.setText(f"{v}°"))
        self.connect_btn.clicked.connect(self.on_connect)
        self.disconnect_btn.clicked.connect(self.on_disconnect)
        self.sync_btn.clicked.connect(self.on_sync)

    def on_connect(self):
        if not VISAAdapter or not _AmetekClass:
            QtWidgets.QMessageBox.warning(self, "Error", "PyMeasure not available.")
            return
        try:
            adapter = VISAAdapter(self.resource_le.text())
            self.inst = _AmetekClass(adapter)
            QtWidgets.QMessageBox.information(self, "Connected", "Instrument connected.")
        except Exception as e:
            QtWidgets.QMessageBox.warning(self, "Error", str(e))

    def on_disconnect(self):
        self.inst = None
        QtWidgets.QMessageBox.information(self, "Disconnected", "Instrument disconnected.")

    def on_sync(self):
        if not self.inst:
            return
        # TODO: implement real sync from instrument
        self.overload_led.set_state(True)
        self.status_led.set_state(True)


if __name__ == "__main__":
    app = QtWidgets.QApplication(sys.argv)
    w = AmetekFrontPanel()
    w.resize(1000, 600)
    w.show()
    sys.exit(app.exec_())
